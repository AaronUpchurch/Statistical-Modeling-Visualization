[{"name":"app.R","content":"# RShiny script for Bootstrapping Applet\r\n\r\n# ============ Imports ==================#\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(shinyjs)\r\nlibrary(stringr)\r\nlibrary(shinyalert)\r\n\r\n\r\n#========== User Interface ==============#\r\nui <- fluidPage(\r\n  \r\n  \r\n  useShinyalert(),\r\n  shinyjs::useShinyjs(),\r\n  \r\n  #------- Title --------------------#\r\n  titlePanel(h1(\"Bootstrapping Applet\", align = \"center\")),\r\n  \r\n  h5(\"By Aaron Upchurch\", align = \"center\"),\r\n  \r\n  #-------- Control Panel -------------\r\n  fluidRow(sidebarPanel(\r\n    \r\n      # Distribution Selection\r\n      selectInput(inputId = \"distribution\",\r\n                  label = \"1. Select Population Distribution\",\r\n                  choices = c(\"Normal\" = \"normal\",\r\n                              \"Chi Squared\" = \"chi_squared\",\r\n                              \"Binomial\" = \"binomial\",\r\n                              \"Horseshoe - Weight\" = \"horseshoe_weight\",\r\n                              \"Horseshoe - Width\" = \"horseshoe_width\"),),\r\n      \r\n      # Metric Selection\r\n      selectInput(inputId = \"metric\",\r\n                  label = \"2. Select Metric\",\r\n                  choices = c(\"Mean\" = \"mean\",\r\n                              \"Variance\" = \"variance\",\r\n                              \"Standard Deviation\" = \"standard deviation\",\r\n                              \"Median\" = \"median\"),),\r\n      \r\n      # Generate Sample Button\r\n      h5(strong(\"3. Draw Sample from Population\")),\r\n      actionButton(\"getSample\", \"Generate Sample\"),\r\n      \r\n      # Generate Bootstrap Button\r\n      h5(strong(\"4. Draw Bootstrap from Sample\")),\r\n      actionButton(\"getBootstrap\", \"Generate Bootstrap Sample\"),\r\n      \r\n      # Show animation check box\r\n      checkboxInput(\"showAnimation\", \"Show Animation\", value = T, width = \"800px\"),\r\n      \r\n      # Draw 100 Bootstraps button\r\n      h5(strong(\"5. Draw 100 Bootstraps from Sample\")),\r\n      actionButton(\"get100Bootstrap\", \"Generate 100 Bootstrap Samples\"),\r\n      \r\n      # Show Bootstrap Confidence Interval Checkbox\r\n      h5(strong(\"6. Get Bootstrap Confidence Interval\")),\r\n      checkboxInput(\"showCI\", \"Show Confidence Interval\", value = FALSE, width = \"800px\"),\r\n      \r\n      # Show Get Help Button\r\n      actionButton(\"showHelp\", \"Get Help\")\r\n  ),\r\n  \r\n  \r\n  #----------------- Graph Panel ------------------\r\n  column(8, align = \"center\",\r\n         \r\n       # Population Histogram\r\n       h5(strong(\"Population Distribution\")),\r\n       plotOutput(outputId = \"DistributionHistogram\",\r\n                  width = \"75%\",\r\n                  height = \"200px\"),\r\n       \r\n       # Sample table\r\n       fluidRow(column(5,align = \"center\",\r\n                h5(strong(\"Sample\")),\r\n                tableOutput(\"sample_table\"),\r\n                textOutput(\"sample_mean\"),),\r\n                \r\n       column(2,align = \"center\",\r\n          \r\n              div(\r\n                style = \"position: absolute; bottom: -130px; right: 60px;\",\r\n                icon(\"right-long\",\"fa-3x\")\r\n              )\r\n             ),\r\n                \r\n         \r\n       # Bootstrap Table\r\n       column(5,align = \"center\",\r\n              h5(strong(\"Bootstrap Sample\")),\r\n              tableOutput(\"bootstrap_table\"),\r\n              span(textOutput(\"bootstrap_mean\"),style=\"color:red; font-weight: bold; font-size: 13px\"),)),\r\n       \r\n       # Bootstrap Dot Plot\r\n       h5(strong(textOutput(\"metric\")),align = \"center\"),\r\n       plotOutput(\"bootstrap_dotplot\", width = \"75%\",\r\n                  height = \"200px\"),\r\n       \r\n       # Confidence Interval Text\r\n       side_by_side_text <- div(\r\n         style = \"display: flex; flex-direction: row;justify-content: center;\",\r\n         span(style = \"color: black; font-size: 17px;\", textOutput(\"ci_begin\")),\r\n         span(style = \"color: limegreen; font-size: 17px;\", textOutput(\"ci_lower\")),\r\n         span(style = \"color: black; font-size: 17px;\", textOutput(\"ci_and\")),\r\n         span(style = \"color: limegreen;font-size: 17px;\", textOutput(\"ci_upper\"))),\r\n)))\r\n\r\n#============== Server Functions ===================\r\nserver <- function(input, output,session) {\r\n  \r\n  #------ Initial Popup -----------------#\r\n  showPopup <- reactiveVal(T)\r\n  \r\n  observeEvent(showPopup,{\r\n    shinyalert(\"Welcome\", \"This is a RShiny application to help students learn about sbootstrapping.\r\n               \r\n                          If you need help, press the 'Get Help' button below.\", \r\n               size = \"m\")\r\n    showPopup(F)\r\n  })\r\n  \r\n  \r\n  #---------- Population Distribution ---------------$\r\n  \r\n  # colors for population distribution\r\n  colors = c(\"normal\" = \"red\",\r\n             \"chi_squared\" = \"blue\",\r\n             \"binomial\" = \"green\",\r\n             \"horseshoe_weight\" = \"orange\",\r\n             \"horseshoe_width\" = \"purple\")\r\n  \r\n  # data for population distribution\r\n  data_distributions= list(\r\n    normal=rnorm(100000),\r\n    chi_squared = rchisq(100000, df = 1),\r\n    binomial = rbinom(100000, size = 10, prob = 0.5),\r\n    horseshoe_width = read.csv(\"datasets/horseshoecrabs.csv\")$width,\r\n    horseshoe_weight = read.csv(\"datasets/horseshoecrabs.csv\")$weight)\r\n  \r\n  # add small variablility to make each point unique for blue color coding later\r\n  data_distributions[[\"horseshoe_width\"]] = data_distributions[[\"horseshoe_width\"]] + rnorm(n = length(data_distributions[[\"horseshoe_width\"]]), sd = 0.0001)\r\n  data_distributions[[\"horseshoe_weight\"]] = data_distributions[[\"horseshoe_weight\"]] + rnorm(n = length(data_distributions[[\"horseshoe_weight\"]]), sd = 0.0001)\r\n  \r\n  # population distribution histogram\r\n  output$DistributionHistogram <- renderPlot({\r\n    \r\n    a <- as.data.frame(data_distributions[[input$distribution]])\r\n    \r\n    colnames(a) <- input$distribution\r\n    \r\n\r\n    p <- ggplot(a, aes_string(x = input$distribution))+\r\n      geom_density(alpha=.2, fill=colors[input$distribution], bw = 0.8) +\r\n      xlab(paste(\"\\u03bc =\",\r\n                 round(mean(data_distributions[[input$distribution]]),2),\r\n                 \"\\u03c3 =\",\r\n                 round(sd(data_distributions[[input$distribution]]),2))) +\r\n      theme_linedraw() +\r\n      scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0))\r\n    \r\n    \r\n    return(p)\r\n    \r\n  })\r\n  \r\n  #--------- Sample Table ----------------#\r\n  output$sample_table <- renderTable(colnames = F,bordered = T,{\r\n    if(input$getSample[1]==0){\r\n      matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)\r\n    }\r\n    else{\r\n      matrix(data = round(my_sample(),2), nrow = 6)\r\n      \r\n    }\r\n  })\r\n  \r\n  output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n    if(input$getBootstrap[1]==0){\r\n      matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)\r\n    }\r\n    else{\r\n      matrix(data = my_bootstrap(), nrow = 6)\r\n    }\r\n  })\r\n  \r\n  # DONT DELETE\r\n  my_sample <- reactiveVal(-99)\r\n  \r\n \r\n  \r\n  my_sample <- eventReactive(\r\n    input$getSample,\r\n    {\r\n      \r\n\r\n      lock(F)\r\n      \r\n      #  clear boostrap and dotplots plots\r\n      output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n        matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)\r\n        \r\n      })\r\n      bootstrap_means$data <- c()\r\n      \r\n      \r\n      temp <- matrix(data = sample(data_distributions[[input$distribution]],36), nrow = 6)\r\n      \r\n      \r\n      output$sample_table <- renderTable(colnames = F,bordered = T,{\r\n        \r\n        \r\n        \r\n        \r\n        \r\n      \r\n        \r\n          \r\n          ret <- ifelse(round(temp,6) == round(last_added_value$value,6), \r\n                        paste0('<span style=\"color:blue; font-weight:bold; font-size=12px\">', round(temp,2), '<\/span>'), \r\n                        round(temp,2))\r\n        \r\n          \r\n\r\n        \r\n        \r\n        \r\n        \r\n        return(ret)\r\n        \r\n        \r\n        \r\n      }, sanitize.text.function = function(x) x)\r\n      \r\n      return(temp)\r\n      \r\n    }\r\n  )\r\n  \r\n  observeEvent(input$getSample,{\r\n    output$sample_mean <- renderText({paste(\"\\u03bc =\",\r\n                                            round(mean(my_sample()),2),\r\n                                            \"s =\",\r\n                                            round(sd(my_sample()),2)\r\n    )})})\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  #--------- Get Bootstrap -------------#\r\n  button_click_time <- reactiveValues(data = Sys.time())\r\n  \r\n  \r\n  \r\n  my_bootstrap <- eventReactive(\r\n    input$getBootstrap,\r\n    {\r\n      \r\n      \r\n\r\n      s <- sample(my_sample(), replace = T)\r\n      \r\n\r\n      button_click_time$data <- Sys.time()\r\n      \r\n      function_map <- list(\r\n        \"mean\" = mean,\r\n        \"variance\" = var,\r\n        \"standard deviation\" = sd,\r\n        \"maximum\" = max,\r\n        \"minimum\" = min,\r\n        \"median\" = median\r\n      )\r\n      \r\n      metric_bootstrap_calculation <- do.call(function_map[[input$metric]],list(x = s))\r\n      output$bootstrap_mean <- renderText({paste(input$metric,\"=\",round(metric_bootstrap_calculation,2))})\r\n      \r\n      output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n        matrix(data = my_bootstrap(), nrow = 6)\r\n      })\r\n      \r\n\r\n      return(s)\r\n    }\r\n  )\r\n  \r\n  \r\n  \r\n  \r\n  #---------- Get 100 Bootstraps -------------- #\r\n\r\n  \r\n  observeEvent(input$get100Bootstrap, {\r\n    \r\n    # Click on getBootstrap button to trigger animation\r\n    shinyjs::click(\"getBootstrap\")\r\n\r\n  \r\n    \r\n    # Generate 200 Bootstrap Sample\r\n    for (i in 1:299){\r\n      \r\n      s <- sample(my_sample(), replace = T)\r\n      \r\n      function_map <- list(\r\n        \"mean\" = mean,\r\n        \"variance\" = var,\r\n        \"standard deviation\" = sd,\r\n        \"maximum\" = max,\r\n        \"minimum\" = min,\r\n        \"median\" = median\r\n      )\r\n      \r\n      metric_bootstrap_calculation <- do.call(function_map[[input$metric]],list(x = s))\r\n      bootstrap_means$data <- c(bootstrap_means$data,metric_bootstrap_calculation)\r\n    }\r\n    \r\n    # show new bootstrap table for continuity\r\n    output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n      matrix(data = my_bootstrap(), nrow = 6)\r\n    })})\r\n  \r\n  \r\n \r\n  \r\n  \r\n  #--------- Bootstrap Dotplot --------------- #\r\n  bootstrap_means <- reactiveValues(data = c())\r\n  percentile_2.5 <- reactiveValues(data = c())\r\n  percentile_97.5 <- reactiveValues(data = c())\r\n  \r\n  \r\n  \r\n  observeEvent(input$getBootstrap, {\r\n    function_map <- list(\r\n      \"mean\" = mean,\r\n      \"variance\" = var,\r\n      \"standard deviation\" = sd,\r\n      \"maximum\" = max,\r\n      \"minimum\" = min,\r\n      \"median\" = median\r\n    )\r\n    metric_bootstrap_calculation <- do.call(function_map[[input$metric]],list(x = my_bootstrap()))\r\n    bootstrap_means$data <- c(bootstrap_means$data, metric_bootstrap_calculation)\r\n  })\r\n  \r\n  \r\n  \r\n  output$bootstrap_dotplot <- renderPlot({\r\n    \r\n    \r\n    dot_colors <- rep('Bootstraps', length(bootstrap_means$data))\r\n    \r\n    if(length(dot_colors) == 0){\r\n      return(NULL)\r\n    }\r\n    \r\n    \r\n    if(input$showCI){\r\n      \r\n      # add slight noise to bootstrap means to allow for correct percentile identification\r\n      #bootstrap_means$data = bootstrap_means$data + rnorm(n = length(bootstrap_means$data),sd = 0.0001)\r\n      \r\n      index_2.5 <- max(as.integer(0.025*length(bootstrap_means$data)),1)\r\n      index_97.5 <- as.integer(0.975*length(bootstrap_means$data))\r\n      \r\n      percentile_2.5$data <- sort(bootstrap_means$data)[index_2.5]\r\n      percentile_97.5$data <- sort(bootstrap_means$data)[index_97.5]\r\n      \r\n      if(length(bootstrap_means$data) >= 100){\r\n      dot_colors[which(bootstrap_means$data == percentile_2.5$data)[1]] = '2.5th Percentile'\r\n      dot_colors[which(bootstrap_means$data == percentile_97.5$data)[1]] = '97.5th Percentile'\r\n      }\r\n      \r\n      \r\n    }\r\n    \r\n    function_map <- list(\r\n      \"mean\" = mean,\r\n      \"variance\" = var,\r\n      \"standard deviation\" = sd,\r\n      \"maximum\" = max,\r\n      \"minimum\" = min,\r\n      \"median\" = median\r\n    )\r\n    metric_bootstrap_calculation <- do.call(function_map[[input$metric]],list(x = my_bootstrap()))\r\n    \r\n    dot_colors[which(bootstrap_means$data == metric_bootstrap_calculation)[1]] = \"Most Recent\"\r\n    \r\n    \r\n    d <- data.frame(x = bootstrap_means$data, Fill = dot_colors)\r\n    category_colors <- c(\"Bootstraps\" = \"black\", \"Most Recent\" = \"red\", \"2.5th Percentile\" = \"Green\",\"97.5th Percentile\" = \"Green\")\r\n    \r\n    \r\n    if(length(bootstrap_means$data) == 1){\r\n      ggplot(d, aes(x = x, fill = Fill)) +\r\n        scale_fill_manual(values = category_colors)+\r\n        geom_dotplot(stackgroups = T,method = \"histodot\", dotsize = 0.5)+\r\n        theme_linedraw() + xlim(0,2*bootstrap_means$data[1])  + \r\n        theme(axis.text.y=element_blank(),axis.ticks.y=element_blank())\r\n    }\r\n    else{\r\n    \r\n    ggplot(d, aes(x = x, fill = Fill)) +\r\n      scale_fill_manual(values = category_colors)+\r\n      geom_dotplot(stackgroups = T,method = \"histodot\",  dotsize = 0.5)+\r\n      theme_linedraw() + \r\n        xlab(paste(\"bootstrap \",input$metric,\"s\",sep=\"\")) +\r\n        theme(axis.text.y=element_blank(),axis.ticks.y=element_blank()) \r\n\r\n    }\r\n  })\r\n  \r\n  #--------- Animation ----------------------------------#\r\n  \r\n  last_added_value <- reactiveValues(value = -1000)\r\n  \r\n  \r\n  animation_speed <- reactiveVal(1)\r\n  \r\n  observe({\r\n    # Re-execute this reactive expression after 1000 milliseconds\r\n    invalidateLater(100, session)\r\n    \r\n    \r\n    if(input$showAnimation){\r\n      animation_speed(1)\r\n    }\r\n    else{\r\n      animation_speed(20)\r\n    }\r\n      n <- max(round( (Sys.time() - button_click_time$data)*animation_speed())  ,round(Sys.time()-Sys.time()))\r\n\r\n      if(n > length(my_bootstrap())){\r\n        if(n >= 3600){\r\n          n <- 0\r\n        }\r\n        else{\r\n        n <- length(my_bootstrap())\r\n        }\r\n      }\r\n\r\n      \r\n      if(n > 0){\r\n        \r\n        subset_bootstrap <- append(round(my_bootstrap()[1:n],2), rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",length(my_bootstrap())-n))\r\n      \r\n        last_added_value$value <- my_bootstrap()[n]\r\n\r\n        \r\n        output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n          \r\n          \r\n          \r\n          temp <- matrix(data = subset_bootstrap, nrow = 6)\r\n          \r\n\r\n          ret <- ifelse(temp == round(last_added_value$value,2), \r\n                 paste0('<span style=\"color:blue; font-weight:bold;\">', temp, '<\/span>'), \r\n                 temp)\r\n          \r\n\r\n          return(ret)\r\n          \r\n          \r\n          \r\n        }, sanitize.text.function = function(x) x)\r\n        \r\n        \r\n      }\r\n      else{\r\n        output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n          matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",length(my_bootstrap())), nrow = 6)\r\n        })\r\n      }\r\n    #}\r\n    \r\n  }\r\n  )\r\n  \r\n  output$metric <- renderText({paste(\"Bootstrap \", str_to_title(input$metric),\"s\", \" Distribution\",sep = \"\")})\r\n  \r\n  \r\n  #-------- Show Confidence Interval --------#\r\n  observeEvent(input$showCI,{\r\n         \r\n     # If Show CI box is checked, display text\r\n     if(input$showCI){\r\n       \r\n       if(length(bootstrap_means$data) >= 100){\r\n       output$ci_begin <- renderText({paste(\"We are 95% confident that the population \",input$metric,\"is between \\U00A0\")})\r\n       output$ci_lower <- renderText({round(percentile_2.5$data,2)})\r\n       output$ci_and <- renderText({\"\\U00A0 and \\U00A0\"})\r\n       output$ci_upper <- renderText({round(percentile_97.5$data,2)})\r\n       }\r\n       else{\r\n         \r\n           message <- \"At least 100 bootstrap samples are required before making a confidence interval.\"\r\n           showNotification(ui = HTML(message),\r\n                            duration = 120,\r\n                            type = \"warning\")\r\n       }\r\n     }\r\n    \r\n    # If Show CI box is not checked, display no text\r\n     else{\r\n       output$ci_begin <- renderText({\"\"})\r\n       output$ci_lower <- renderText({\"\"})\r\n       output$ci_and <- renderText({\"\"})\r\n       output$ci_upper <- renderText({\"\"})\r\n     }})\r\n  \r\n  \r\n  lock <- reactiveVal(T)\r\n\r\n  #------- Reset App if New Distribution ----------\r\n  observeEvent(input$distribution, {\r\n    \r\n    lock(T)\r\n    \r\n    # reset button click time\r\n    button_click_time$data <- Sys.time() - as.numeric(3600)\r\n    \r\n\r\n    #shinyjs::click(\"getSample\")\r\n    \r\n\r\n    \r\n    # Deselect Show CI Checkbox\r\n    updateCheckboxInput(session, \"showCI\", value = F)\r\n  \r\n    # Delete CI Interpretation Text\r\n    output$ci_begin <- renderText({\"\"})\r\n    output$ci_lower <- renderText({\"\"})\r\n    output$ci_and <- renderText({\"\"})\r\n    output$ci_upper <- renderText({\"\"})\r\n    \r\n    \r\n    # STRANGE ERROR HERE\r\n    # Delete Sample Mean and Standard Deviation Text\r\n    output$sample_mean <- renderText({\"\"})\r\n    \r\n    # Delete Bootstrap Table Metric Text\r\n    output$bootstrap_mean <- renderText({\"\"})\r\n    \r\n    # Clear Bootstrap Table\r\n    output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n      matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)})\r\n    \r\n    output$sample_table <- renderTable(colnames = F,bordered = T,{\r\n      matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)})\r\n    \r\n    \r\n    # Clear Bootstrap Data\r\n    bootstrap_means$data <- c()\r\n    \r\n    })\r\n  \r\n  \r\n  #------- Reset App if New Metric ---------\r\n  observeEvent(input$metric, {\r\n    \r\n    # Clear Bootstrap Table\r\n    output$bootstrap_table <- renderTable(colnames = F,bordered = T,{\r\n      matrix(data = rep(\"\\U00A0 \\U00A0 \\U00A0 \\U00A0\",36), nrow = 6)})\r\n    \r\n    # Clear Bootstrap Data\r\n    bootstrap_means$data <- c()\r\n  })\r\n  \r\n  \r\n  #-- Get Help Message ---------------------\r\n  observeEvent(input$showHelp, {\r\n    shinyalert(\"Confused?\", \"\r\n                            <div style='text-align: center;'>\r\n                            Bootstrapping is a way to calculate statistics using \r\n                                                                                <span style=\\\"font-weight:bold; \\\"> simulations <\/span> \r\n                                                                                rather than \r\n                                                                                              <span style=\\\"font-weight:bold; \\\"> equations<\/span>.<br> <br>\r\n               \r\n               \r\n                            <div style='text-align: center;'>\r\n                            Follow the steps below to practice bootstrapping:<br> <br>\r\n               \r\n                            \r\n               \r\n                            <div style='text-align: left; display: inline-block;'>\r\n                            <span style=\\\"font-size: 14px; line-height: 1;\\\">\r\n                            1. Refresh the page <br>\r\n                            2. Click <span style=\\\"text-decoration: underline;\\\"> Generate Sample<\/span> to draw a random sample from the normal population <br>\r\n                            3. Click <span style=\\\"text-decoration: underline;\\\"> Generate Bootstrap Sample<\/span> to draw a bootstrap sample from the random sample <br>\r\n                            <span style=\\\"font-size: 12px;\\\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *Note how bootstrapping uses sampling with replacement and allows for duplicate values <\/span> <br> \r\n                            <span style=\\\"font-size: 12px;\\\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *The mean of the bootstrap sample is shown in red<\/span> <br> \r\n                            4. Click on <span style=\\\"text-decoration: underline;\\\"> Generate 100 Bootstrap Samples<\/span> to draw 100 bootstrap samples <br>\r\n                            5. Check the <span style=\\\"text-decoration: underline;\\\"> Show Confidence Interval<\/span> box to show the bootstrap confidence interval <br>  <br>\r\n                            <\/span> \r\n                            <\/div>\r\n                            <div style='text-align: center;'>\r\n                            Bootstrapping can be used to create confidence intervals for other population distributions and metrics.\r\n                            \",size = \"m\",html = T\r\n               )})\r\n  \r\n  \r\n  \r\n\r\n  \r\n  }\r\n\r\n# Call Shiny App\r\nshinyApp(ui, server)","type":"text"},{"name":"datasets/horseshoecrabs.csv","content":"color,spring,width,satelite,weight,y\r\n3,3,28.3,8,3050,1\r\n4,3,22.5,0,1550,0\r\n2,1,26,9,2300,1\r\n4,3,24.8,0,2100,0\r\n4,3,26,4,2600,1\r\n3,3,23.8,0,2100,0\r\n2,1,26.5,0,2350,0\r\n4,2,24.7,0,1900,0\r\n3,1,23.7,0,1950,0\r\n4,3,25.6,0,2150,0\r\n4,3,24.3,0,2150,0\r\n3,3,25.8,0,2650,0\r\n3,3,28.2,11,3050,1\r\n5,2,21,0,1850,0\r\n3,1,26,14,2300,1\r\n2,1,27.1,8,2950,1\r\n3,3,25.2,1,2000,1\r\n3,3,29,1,3000,1\r\n5,3,24.7,0,2200,0\r\n3,3,27.4,5,2700,1\r\n3,2,23.2,4,1950,1\r\n2,2,25,3,2300,1\r\n3,1,22.5,1,1600,1\r\n4,3,26.7,2,2600,1\r\n5,3,25.8,3,2000,1\r\n5,3,26.2,0,1300,0\r\n3,3,28.7,3,3150,1\r\n3,1,26.8,5,2700,1\r\n5,3,27.5,0,2600,0\r\n3,3,24.9,0,2100,0\r\n2,1,29.3,4,3200,1\r\n2,3,25.8,0,2600,0\r\n3,2,25.7,0,2000,0\r\n3,1,25.7,8,2000,1\r\n3,1,26.7,5,2700,1\r\n5,3,23.7,0,1850,0\r\n3,3,26.8,0,2650,0\r\n3,3,27.5,6,3150,1\r\n5,3,23.4,0,1900,0\r\n3,3,27.9,6,2800,1\r\n4,3,27.5,3,3100,1\r\n2,1,26.1,5,2800,1\r\n2,1,27.7,6,2500,1\r\n3,1,30,5,3300,1\r\n4,1,28.5,9,3250,1\r\n4,3,28.9,4,2800,1\r\n3,3,28.2,6,2600,1\r\n3,3,25,4,2100,1\r\n3,3,28.5,3,3000,1\r\n3,1,30.3,3,3600,1\r\n5,3,24.7,5,2100,1\r\n3,3,27.7,5,2900,1\r\n2,1,27.4,6,2700,1\r\n3,3,22.9,4,1600,1\r\n3,1,25.7,5,2000,1\r\n3,3,28.3,15,3000,1\r\n3,3,27.2,3,2700,1\r\n4,3,26.2,3,2300,1\r\n3,1,27.8,0,2750,0\r\n5,3,25.5,0,2250,0\r\n4,3,27.1,0,2550,0\r\n4,3,24.5,5,2050,1\r\n4,1,27,3,2450,1\r\n3,3,26,5,2150,1\r\n3,3,28,1,2800,1\r\n3,3,30,8,3050,1\r\n3,3,29,10,3200,1\r\n3,3,26.2,0,2400,0\r\n3,1,26.5,0,1300,0\r\n3,3,26.2,3,2400,1\r\n4,3,25.6,7,2800,1\r\n4,3,23,1,1650,1\r\n4,3,23,0,1800,0\r\n3,3,25.4,6,2250,1\r\n4,3,24.2,0,1900,0\r\n3,2,22.9,0,1600,0\r\n4,2,26,3,2200,1\r\n3,3,25.4,4,2250,1\r\n4,3,25.7,0,1200,0\r\n3,3,25.1,5,2100,1\r\n4,2,24.5,0,2250,0\r\n5,3,27.5,0,2900,0\r\n4,3,23.1,0,1650,0\r\n4,1,25.9,4,2550,1\r\n3,3,25.8,0,2300,0\r\n5,3,27,3,2250,1\r\n3,3,28.5,0,3050,0\r\n5,1,25.5,0,2750,0\r\n5,3,23.5,0,1900,0\r\n3,2,24,0,1700,0\r\n3,1,29.7,5,3850,1\r\n3,1,26.8,0,2550,0\r\n5,3,26.7,0,2450,0\r\n3,1,28.7,0,3200,0\r\n4,3,23.1,0,1550,0\r\n3,1,29,1,2800,1\r\n4,3,25.5,0,2250,0\r\n4,3,26.5,1,1967,1\r\n4,3,24.5,1,2200,1\r\n4,3,28.5,1,3000,1\r\n3,3,28.2,1,2867,1\r\n3,3,24.5,1,1600,1\r\n3,3,27.5,1,2550,1\r\n3,2,24.7,4,2550,1\r\n3,1,25.2,1,2000,1\r\n4,3,27.3,1,2900,1\r\n3,3,26.3,1,2400,1\r\n3,3,29,1,3100,1\r\n3,3,25.3,2,1900,1\r\n3,3,26.5,4,2300,1\r\n3,3,27.8,3,3250,1\r\n3,3,27,6,2500,1\r\n4,3,25.7,0,2100,0\r\n3,3,25,2,2100,1\r\n3,3,31.9,2,3325,1\r\n5,3,23.7,0,1800,0\r\n5,3,29.3,12,3225,1\r\n4,3,22,0,1400,0\r\n3,3,25,5,2400,1\r\n4,3,27,6,2500,1\r\n4,3,23.8,6,1800,1\r\n2,1,30.2,2,3275,1\r\n4,3,26.2,0,2225,0\r\n3,3,24.2,2,1650,1\r\n3,3,27.4,3,2900,1\r\n3,2,25.4,0,2300,0\r\n4,3,28.4,3,3200,1\r\n5,3,22.5,4,1475,1\r\n3,3,26.2,2,2025,1\r\n3,1,24.9,6,2300,1\r\n2,2,24.5,6,1950,1\r\n3,3,25.1,0,1800,0\r\n3,1,28,4,2900,1\r\n5,3,25.8,10,2250,1\r\n3,3,27.9,7,3050,1\r\n3,3,24.9,0,2200,0\r\n3,1,28.4,5,3100,1\r\n4,3,27.2,5,2400,1\r\n3,2,25,6,2250,1\r\n3,3,27.5,6,2625,1\r\n3,1,33.5,7,5200,1\r\n3,3,30.5,3,3325,1\r\n4,3,29,3,2925,1\r\n3,1,24.3,0,2000,0\r\n3,3,25.8,0,2400,0\r\n5,3,25,8,2100,1\r\n3,1,31.7,4,3725,1\r\n3,3,29.5,4,3025,1\r\n4,3,24,10,1900,1\r\n3,3,30,9,3000,1\r\n3,3,27.6,4,2850,1\r\n3,3,26.2,0,2300,0\r\n3,1,23.1,0,2000,0\r\n3,1,22.9,0,1600,0\r\n5,3,24.5,0,1900,0\r\n3,3,24.7,4,1950,1\r\n3,3,28.3,0,3200,0\r\n3,3,23.9,2,1850,1\r\n4,3,23.8,0,1800,0\r\n4,2,29.8,4,3500,1\r\n3,3,26.5,4,2350,1\r\n3,3,26,3,2275,1\r\n3,3,28.2,8,3050,1\r\n5,3,25.7,0,2150,0\r\n3,3,26.5,7,2750,1\r\n3,3,25.8,0,2200,0\r\n4,3,24.1,0,1800,0\r\n4,3,26.2,2,2175,1\r\n4,3,26.1,3,2750,1\r\n4,3,29,4,3275,1\r\n2,1,28,0,2625,0\r\n5,3,27,0,2625,0\r\n3,2,24.5,0,2000,0\r\n","type":"text"}]
