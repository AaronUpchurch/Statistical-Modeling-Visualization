[{"name":"app.R","content":"# RShiny script for Bootstrapping Applet\r\n\r\n\r\n\r\n# ============ Imports ==================#\r\nlibrary(shiny)\r\n\r\n#============= user Interface ==============#\r\nui <- fluidPage(\r\n  \r\n  #------- Title --------------------#\r\n  titlePanel(h1(\"Bootstrapping Applet\", \r\n                align = \"center\")),\r\n  \r\n  #-------- Distribution Selection -------#\r\n  selectInput(inputId = \"distribution\", \r\n              label = \"Select Distribution\", \r\n              choices = c(\"Normal\" = \"normal\",\r\n                          \"Chi Squared\" = \"chi_squared\",\r\n                          \"Binomial\" = \"binomial\",\r\n                          \"Proportion\" = \"proportion\")),\r\n  \r\n  #------------ Distribution Histogram ----------#\r\n  h5(\"Distribution Histogram\"),\r\n  plotOutput(outputId = \"DistributionHistogram\",\r\n             width = \"75%\",\r\n             height = \"200px\"),\r\n  \r\n\r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\mu = $$\")),\r\n      h4(textOutput(\"distribution_mean\"))\r\n  ),\r\n  \r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\sigma = $$\")),\r\n      h4(textOutput(\"distribution_stddev\"))\r\n  ),\r\n  \r\n  #-------------- Sample ----------------#\r\n  actionButton(\"getSample\", \"Generate Sample\"),\r\n  \r\n  h5(\"Sample\"),\r\n  tableOutput(\"sample_table\"),\r\n  \r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\mu = $$\")),\r\n      h4(textOutput(\"sample_mean\"))\r\n  ),\r\n  \r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\sigma = $$\")),\r\n      h4(textOutput(\"sample_stddev\"))\r\n  ),\r\n  \r\n  \r\n  #--------- Bootstrap Sample ------------------#\r\n  actionButton(\"getBootstrap\", \"Generate Bootstrap Sample\"),\r\n  \r\n  \r\n  h5(\"Boostrapped Sample\"),\r\n  tableOutput(\"bootstrap_table\"),\r\n  \r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\mu = $$\")),\r\n      h4(textOutput(\"bootstrap_mean\"))\r\n  ),\r\n  \r\n  div(style = \"display: flex; align-items: center;\",\r\n      h4(withMathJax(\"$$\\\\sigma = $$\")),\r\n      h4(textOutput(\"bootstrap_stddev\"))\r\n  ),\r\n  \r\n  h4(\"Bootstrap Dot Plot\"),\r\n  plotOutput(\"bootstrap_dotplot\", width = \"75%\",\r\n             height = \"200px\"),\r\n  \r\n \r\n  \r\n  \r\n)\r\n\r\nserver <- function(input, output) {\r\n  \r\n    colors = c(\"normal\" = \"red\",\r\n               \"chi_squared\" = \"blue\",\r\n               \"binomial\" = \"green\",\r\n               \"proportion\" = \"orange\"\r\n    )\r\n    \r\n    data=data.frame(\r\n      normal=rnorm(100000),\r\n      chi_squared = rchisq(100000, df = 1),\r\n      binomial = rbinom(100000, size = 10, prob = 0.5),\r\n      proportion = rbinom(100000, size = 10, prob = 0.5) / 10\r\n    )\r\n  \r\n  output$distribution_mean <- renderText({\r\n                              round(mean(data[[input$distribution]]),2)})\r\n  \r\n  output$distribution_stddev <- renderText({\r\n                             round(sd(data[[input$distribution]]),2)})\r\n  \r\n  \r\n  output$sample_mean <- renderText({\r\n    round(mean(my_sample()),2)})\r\n  \r\n  output$sample_stddev <- renderText({\r\n    round(sd(my_sample()),2)})\r\n  \r\n  output$bootstrap_mean <- renderText({\r\n    round(mean(my_bootstrap()),2)})\r\n  \r\n  output$bootstrap_stddev <- renderText({\r\n    round(sd(my_bootstrap()),2)})\r\n  \r\n\r\n  output$DistributionHistogram <- renderPlot({\r\n    \r\n\r\n    \r\n    p <- ggplot(data, aes_string(x = input$distribution))+ \r\n      geom_density(alpha=.2, fill=colors[input$distribution], bw = 0.8) \r\n    \r\n    return(p)\r\n\r\n  })\r\n  \r\n  output$sample_table <- renderTable({\r\n    matrix(data = my_sample(), nrow = 10)\r\n  })\r\n  \r\n\r\n  output$bootstrap_table <- renderTable({\r\n    matrix(data = my_bootstrap(), nrow = 10)\r\n  })\r\n  \r\n  \r\n  my_sample <- eventReactive(\r\n    input$getSample,\r\n    {\r\n      start <- sample.int(100000,1)\r\n      data[[input$distribution]][start:(start+99)]\r\n    }\r\n  )\r\n  \r\n  \r\n  \r\n  my_bootstrap <- eventReactive(\r\n    input$getBootstrap,\r\n    {\r\n      s <- sample(my_sample(), replace = T)\r\n      return(s)\r\n    }\r\n  )\r\n  \r\n  \r\n  output$bootstrap_dotplot <- renderPlot({\r\n    d <- data.frame(x = my_bootstrap())\r\n    ggplot(d, aes(x = x)) +\r\n      geom_dotplot(binwidth = 0.2)\r\n  })\r\n  \r\n  \r\n  \r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
