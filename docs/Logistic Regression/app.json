[{"name":"app.R","content":"library(shiny)\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n\r\n  # App title ----\r\n  titlePanel(\"Logistic Curve\"),\r\n\r\n  #Logit Form ----\r\n  mainPanel(withMathJax(\"$$\\\\text{Logit Form: }\\\\frac{\\\\pi}{1-\\\\pi}=\\\\beta_0+\\\\beta_1 x \\\\hspace{1cm} \\\\text{Probability Form: }\\\\pi = \\\\frac{e^{\\\\beta_0+\\\\beta_1 x}}{1+e^{\\\\beta_0+\\\\beta_1 x}}$$\")),\r\n  \r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(\r\n\r\n    # Sidebar panel for inputs ----\r\n    sidebarPanel(\r\n\r\n      # Input: Slider for the number of bins ----\r\n      sliderInput(inputId = \"beta0\",\r\n                  label = withMathJax(\"$$\\\\text{Intercept}\\\\hspace{.25cm}\\\\beta_0$$\"),\r\n                  min = -5,\r\n                  max = 5,\r\n                  value = 0),\r\n      # Input: Slider for the number of bins ----\r\n      sliderInput(inputId = \"beta1\",\r\n                  label = withMathJax(\"$$\\\\text{Slope}\\\\hspace{.25cm}\\\\beta_1$$\"),\r\n                  min = -5,\r\n                  max = 5,\r\n                  value = 0),\r\n\r\n    ),\r\n\r\n    # Main panel for displaying outputs ----\r\n    mainPanel(\r\n\r\n      # Output: Histogram ----\r\n      plotOutput(outputId = \"distPlot\")\r\n\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n\r\n  # Histogram of the Old Faithful Geyser Data ----\r\n  # with requested number of bins\r\n  # This expression that generates a histogram is wrapped in a call\r\n  # to renderPlot to indicate that:\r\n  #\r\n  # 1. It is \"reactive\" and therefore should be automatically\r\n  #    re-executed when inputs (input$bins) change\r\n  # 2. Its output type is a plot\r\n  output$distPlot <- renderPlot({\r\n    \r\n    x_values <- seq(-5, 5, length.out = 100)\r\n    \r\n    # Logistic function formula\r\n    logistic_function <- function(x, a, c) {\r\n      y <- 1 / (1 + exp(-(a * (x) + c)))\r\n      return(y)\r\n    }\r\n    \r\n    y_values <- logistic_function(x_values, input$beta1, input$beta0)\r\n\r\n    plot_data <- data.frame(x = x_values, y = y_values)\r\n    ggplot(plot_data, aes(x, y)) +\r\n      geom_line() +\r\n      labs(title = \"Logistic Function\",\r\n           x = \"x\",\r\n           y = withMathJax(\"$$\\\\pi$$\"))\r\n\r\n  })\r\n\r\n}\r\nshinyApp(ui = ui, server = server)\r\n\r\n# \r\n","type":"text"}]
