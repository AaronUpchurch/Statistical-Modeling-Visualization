[{"name":"app.R","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(latex2exp)\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n  \r\n  # App title ----\r\n  titlePanel(\"Logistic Curve\"),\r\n  \r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(position = \"right\",\r\n                \r\n                # Sidebar panel for inputs ----\r\n                sidebarPanel(\r\n                  \r\n                  # Input: Slider for the number of bins ----\r\n                  numericInput(inputId = \"beta0\",\r\n                               label = TeX(\"$\\\\text{Intercept}\\\\hspace{.25cm}\\\\beta_0$\"),\r\n                               min = -100,\r\n                               max = 100,\r\n                               value = 1),\r\n                  # Input: Slider for the number of bins ----\r\n                  numericInput(inputId = \"beta1\",\r\n                               label = TeX(\"$\\\\text{Slope}\\\\hspace{.25cm}\\\\beta_1$\"),\r\n                               min = -100,\r\n                               max = 100,\r\n                               value = 1),\r\n                  numericInput(inputId = \"x1\",\r\n                               label = TeX(\"$\\\\text{Value for }X_1$\"),\r\n                               min = -100,\r\n                               max = 100,\r\n                               value = 1),\r\n                  \r\n                ),\r\n                #Logit Form ----\r\n                mainPanel(TeX(\"$\\\\text{Logit Form: }\\\\frac{\\\\pi}{1-\\\\pi}=\\\\beta_0+\\\\beta_1 x \\\\hspace{1cm} \\\\text{Probability Form: }\\\\pi = \\\\frac{e^{\\\\beta_0+\\\\beta_1 x}}{1+e^{\\\\beta_0+\\\\beta_1 x}}$\")),\r\n                \r\n  ),\r\n  # Main panel for displaying outputs ----\r\n  mainPanel(\r\n    \r\n    # Output: Histogram ----\r\n    plotOutput(outputId = \"distPlot\"),\r\n    \r\n    plotOutput(outputId = \"logOdds\"),\r\n    textOutput(outputId = \"logOddsValue\"),\r\n    textOutput(outputId = \"probabilityValue\")\r\n    \r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n  \r\n  # Histogram of the Old Faithful Geyser Data ----\r\n  # with requested number of bins\r\n  # This expression that generates a histogram is wrapped in a call\r\n  # to renderPlot to indicate that:\r\n  #\r\n  # 1. It is \"reactive\" and therefore should be automatically\r\n  #    re-executed when inputs (input$bins) change\r\n  # 2. Its output type is a plot\r\n  \r\n  output$distPlot <- renderPlot({\r\n    center <- -1*input$beta0/input$beta1\r\n    \r\n    \r\n    x_values <- seq(center - 5, center + 5, length.out = 100)\r\n    \r\n    # Logistic function formula\r\n    logistic_function <- function(x, a, c) {\r\n      y <- 1 / (1 + exp(-(a * (x) + c)))\r\n      return(y)\r\n    }\r\n    \r\n    y_values <- logistic_function(x_values, input$beta1, input$beta0)\r\n    \r\n    plot_data <- data.frame(x = x_values, y = y_values)\r\n    ggplot(plot_data, aes(x, y)) +\r\n      geom_line() +\r\n      labs(title = \"Probability Curve\",\r\n           x = \"x\",\r\n           y = expression(pi))\r\n    \r\n  })\r\n  \r\n  output$logOdds <- renderPlot({\r\n    center <- -1*input$beta0/input$beta1\r\n    \r\n    x_values <- seq(center - 5, center + 5, length.out = 100)\r\n    \r\n    logistic_function <- function(x, a, c) {\r\n      y <- a * (x) + c\r\n      return(y)\r\n    }\r\n    y_values <- logistic_function(x_values, input$beta1, input$beta0)\r\n    \r\n    plot_data <- data.frame(x = x_values, y = y_values)\r\n    ggplot(plot_data, aes(x, y)) +\r\n      geom_line() +\r\n      labs(title = \"Log Odds Curve\",\r\n           x = \"x\",\r\n           y = TeX(\"$log\\\\frac{\\\\pi}{1-\\\\pi}$\")) +\r\n      ylim(-30, 30)\r\n  })\r\n  \r\n  output$logOddsValue <- renderText({\r\n    center <- -1*input$beta0/input$beta1\r\n    \r\n    x_input <- input$x1\r\n    beta0 <- input$beta0\r\n    beta1 <- input$beta1\r\n    \r\n    log_odds <- beta0 + beta1 * x_input\r\n    paste(\"Log Odds:\", log_odds)\r\n  })\r\n  \r\n  output$probabilityValue <- renderText({\r\n    center <- -1*input$beta0/input$beta1\r\n    \r\n    x_input <- input$x1\r\n    beta0 <- input$beta0\r\n    beta1 <- input$beta1\r\n    \r\n    probability <- exp(beta0 + beta1 * x_input) / (1 + exp(beta0 + beta1 * x_input))\r\n    paste(\"Probability:\", probability)\r\n  })\r\n  \r\n}\r\nshinyApp(ui = ui, server = server)","type":"text"}]
